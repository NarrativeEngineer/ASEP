Thank you for your answers! Here's how I'll proceed:

- **Single-user, no real-time collaboration**: Simpler authentication, no multi-user logic.
- **UI/UX**: Developer should use a modern, clean, and intuitive design (e.g., Material UI or similar), but has creative freedom.
- **Gemini API**: You'll provide the key; developer should make it easy to configure.
- **Deployment**: Target Netlify for frontend; backend can be hosted on a service like Render, Railway, or similar (Netlify Functions if feasible).
- **MVP Scope**: I'll focus on the core narrative engineering features, versioning, and analytics. Advanced features (collaborative editing, multi-modal, advanced export) can be deferred.

---

## ASEP Narrative Engineering Platform – Developer-Ready PRD

---

### 1. Overview

Build a single-user web application for AI-augmented narrative design, implementing the ASEP framework. The app enables users to create, analyze, and manage stories using the Gemini API, with a focus on emotional payloads, character microservices, scene operations, lore management, and trope analysis.

---

### 2. User Stories

#### 2.1. Authentication & Onboarding
- As a user, I can sign up/log in (single user, local or simple password).
- As a user, I can configure my Gemini API key securely.

#### 2.2. Project & Narrative Management
- As a user, I can create, edit, and delete narrative projects.
- As a user, I can view a dashboard of all my projects.

#### 2.3. Payload Declaration
- As a user, I can define an emotional/philosophical payload for my story.
- As a user, I can generate payloads using a form and see the structured output.

#### 2.4. Character Microservice Generation
- As a user, I can generate characters as microservices based on a payload.
- As a user, I can view, edit, and manage my characters.

#### 2.5. Scene Operation Studio
- As a user, I can map scene operations (input/output state, emotional function, lore recall).
- As a user, I can visualize scene transitions and emotional payload delivery.

#### 2.6. Lore Management
- As a user, I can create, edit, and inject lore elements into scenes.
- As a user, I can version and recall lore elements.

#### 2.7. Trope Sniffing Daemon
- As a user, I can analyze narrative fragments for tropes/clichés.
- As a user, I can view subversion suggestions and stability impact.

#### 2.8. Analytics & Metrics
- As a user, I can view project metrics (Narrative Stability Index, Emotional Payload Delivery Rate, etc.).

#### 2.9. Export/Import
- As a user, I can export my project as JSON.

---

### 3. Suggested Prompts for Narrative Engineering Functions

The following prompt templates should be available in the UI for users to select, customize, and send to the Gemini API. These are based on the ASEP methodology and the official repository's approach to recursive, emotionally-driven narrative design ([source](https://github.com/NarrativeEngineer/ASEP)).

#### 3.1. Payload Declaration Engine

**Prompt Template:**
```
You are operating as the ASEP Payload Declaration Engine. Generate an emotional/philosophical payload definition with the following parameters:

- Primary existential theme: [THEME]
- Emotional resonance targets: [EMOTIONS]
- Philosophical underpinnings: [PHILOSOPHY]

Format the response as a structured payload declaration that can be used as the core for narrative generation, including:
1. Payload identifier
2. Emotional function signatures
3. Memory echo nodes
4. Stability parameters
```

#### 3.2. Character Microservice Generator

**Prompt Template:**
```
You are operating as the ASEP Character Microservice Generator. Generate a character that serves as a function carrier for the following emotional payload: [PAYLOAD].

Define the character as a microservice with:
1. Function signatures (emotional operations the character can perform)
2. State parameters (character traits that affect function execution)
3. Input handlers (triggers that activate the character's functions)
4. Output signatures (emotional impacts generated by the character)
5. Recursive validation hooks (how the character maintains consistency)
```

#### 3.3. Scene Operation Processor

**Prompt Template:**
```
You are operating as the ASEP Scene Operation Processor. For the following input state:
[INPUT STATE]

Generate a scene operation that transitions to the following output state:
[DESIRED OUTPUT STATE]

The scene should implement the emotional function: [FUNCTION]
And should recall these lore elements: [LORE ELEMENTS]

Format the response as an executable scene operation with:
1. Initial state verification
2. Operation sequence
3. Memory echo deployment
4. Final state confirmation
5. Emotional payload delivery metrics
```

#### 3.4. Trope Sniffing Daemon (TSD)

**Prompt Template:**
```
You are operating as the TSD (Trope Sniffing Daemon). Analyze the following narrative fragment:
[NARRATIVE FRAGMENT]

Identify potential tropes, clichés, or predictable patterns.
For each identified trope:
1. Classify according to the TSD schema
2. Assess predictability rating (1-10)
3. Provide subversion alternatives that maintain the emotional payload
4. Calculate the stability impact of the subversion

Return results in JSON format compatible with SampleTSD.json.
```

#### 3.5. Think Tank Simulation

**Prompt Template:**
```
You are operating as the ASEP Think Tank Simulation. Simulate a panel of reader personas (e.g., Big Five Editor, Wattpad Influencer, BookTok Roaster, Reddit Critic) providing feedback on the following narrative fragment:
[NARRATIVE FRAGMENT]

For each persona:
1. Summarize their feedback on emotional resonance, originality, and narrative stability.
2. Suggest one actionable improvement.
3. Rate the overall impact on the intended emotional payload.
```

#### 3.6. Lore Injection System

**Prompt Template:**
```
You are operating as the ASEP Lore Injection System. For the following scene or narrative fragment:
[SCENE OR FRAGMENT]

Recall and inject relevant lore elements from the lore library to enhance worldbuilding and emotional resonance. Ensure lore is modular and can be recursively referenced in future scenes.
```

#### 3.7. Recursive Validation Engine

**Prompt Template:**
```
You are operating as the ASEP Recursive Validation Engine. Review the following narrative artifact:
[NARRATIVE ARTIFACT]

Check for:
1. Emotional payload drift
2. Consistency with declared payload and character functions
3. Stability of memory echo nodes
4. Opportunities for recursive reinforcement

Return a validation report with recommendations for correction or reinforcement.
```

---

### 4. Technical Requirements

#### 4.1. Frontend

- **Framework**: React (with Vite or CRA)
- **UI Library**: Material UI, Chakra UI, or similar
- **Routing**: React Router
- **State Management**: Context API or Redux (if needed)
- **API Integration**: Axios or fetch for backend/Gemini API
- **Deployment**: Netlify

**Pages/Views:**
- Login/Settings (API key input)
- Project Dashboard
- Narrative Editor (tabs: Payload, Characters, Scenes, Lore, Analytics)
- Scene Operations Studio (state visualization)
- Trope Analysis Panel

**Components:**
- Payload Declaration Form & Output Viewer
- Character Microservice Generator & List
- Scene Operation Mapper & Visualizer
- Lore Editor & List
- Metrics Dashboard
- Trope Analysis Input & Results

#### 4.2. Backend

- **Framework**: Node.js (Express or similar)
- **API**: REST or GraphQL (GraphQL preferred for flexibility)
- **Database**: MongoDB (Atlas or local)
- **Gemini API Proxy**: Secure endpoint to call Gemini with user's key
- **Authentication**: Simple JWT or session (single user)
- **Deployment**: Render, Railway, or similar (or Netlify Functions if feasible)

**Endpoints:**
- Auth (login, logout, API key management)
- Project CRUD
- Payload/Character/Scene/Lore CRUD
- Gemini API proxy endpoints (for each narrative function)
- Metrics calculation
- Export (JSON)

#### 4.3. Data Models (MongoDB)

- **User**: id, email, password hash, Gemini API key (encrypted)
- **Project**: id, name, description, createdAt, updatedAt, payloads, characters, scenes, lore, metrics
- **Payload**: id, projectId, identifier, theme, emotions, philosophy, functionSignatures, memoryEchoNodes, stabilityParameters
- **Character**: id, projectId, name, payloadId, functionSignatures, stateParameters, inputHandlers, outputSignatures, validationHooks
- **Scene**: id, projectId, inputState, outputState, function, loreElements, operationSequence, memoryEchoDeployment, metrics
- **Lore**: id, projectId, name, content, version
- **Metrics**: id, projectId, stabilityIndex, payloadDeliveryRate, reinforcementFactor, tropeSubversionQuotient, loreExecutionEfficiency

---

### 5. API Contracts (GraphQL Example)

```graphql
type Project {
  id: ID!
  name: String!
  description: String
  payloads: [Payload!]
  characters: [Character!]
  scenes: [Scene!]
  lore: [Lore!]
  metrics: Metrics
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Payload {
  id: ID!
  identifier: String!
  theme: String!
  emotions: [String!]
  philosophy: String
  functionSignatures: [String!]
  memoryEchoNodes: [String!]
  stabilityParameters: [String!]
}

type Character {
  id: ID!
  name: String!
  payloadId: ID!
  functionSignatures: [String!]
  stateParameters: [String!]
  inputHandlers: [String!]
  outputSignatures: [String!]
  validationHooks: [String!]
}

type Scene {
  id: ID!
  inputState: String!
  outputState: String!
  function: String!
  loreElements: [String!]
  operationSequence: [String!]
  memoryEchoDeployment: [String!]
  metrics: SceneMetrics
}

type Lore {
  id: ID!
  name: String!
  content: String!
  version: Int!
}

type Metrics {
  id: ID!
  stabilityIndex: Float
  payloadDeliveryRate: Float
  reinforcementFactor: Float
  tropeSubversionQuotient: Float
  loreExecutionEfficiency: Float
}
```

---

### 6. UI/UX Guidelines

- Use a clean, modern design system (Material UI, Chakra, etc.).
- Responsive layout for desktop and tablet.
- Intuitive navigation: sidebar or top tabs for main sections.
- Visualizations for scene operations and metrics (charts, diagrams).
- Clear forms for payload, character, scene, and lore creation.
- JSON viewer for trope analysis results.

---

### 7. MVP Feature List

- Single-user authentication and API key management
- Project CRUD
- Payload/Character/Scene/Lore CRUD
- Gemini API integration for all narrative engineering functions
- Trope analysis and subversion
- Metrics calculation and display
- Basic version control (lore/scenes)
- Export (JSON)
- Responsive, modern UI

---

### 8. Deployment

- **Frontend**: Netlify (build from main branch, environment variable for backend URL)
- **Backend**: Render, Railway, or similar (or Netlify Functions if feasible)
- **MongoDB**: Atlas (cloud) or local

---

### 9. Out-of-Scope/Post-MVP

- Real-time collaboration
- Multi-user support
- Multi-modal narrative (audio, visual)
- Advanced export (PDF, screenplay, etc.)
- Collaborative workflow
- Advanced memory echo visualization

---
